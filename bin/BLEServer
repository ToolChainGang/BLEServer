#!/usr/bin/perl
#
########################################################################################################################
########################################################################################################################
##
##      Copyright (C) 2020 Peter Walsh, Milford, NH 03055
##      All Rights Reserved under the MIT license as outlined below.
##
##  FILE
##
##      BLEServer
##
##  DESCRIPTION
##
##      Bluetooth Low Energy (BLE) service
##
##      Accept commands from a web socket and perform requested BLE function.
##
##  USAGE
##
##      BLEServer [-v]
##
##      where:      -v      Verbose: print out things as they happen
##
##      Available commands:
##
##      ListCommands        => Array of available commands (this list)
##
##      Examples:
##
##          ToggleGPIO 7            Change state of GPIO 7: if Off, becomes On. If On, becomes Off
##
##          CycleGPIO  10           Will turn 10 Off, wait a while, then on again
##
##          SetUName   7 "Keurig"   Change UName of GPIO7 to "Keurig"
##
########################################################################################################################
########################################################################################################################
##
## $BLEInfo   contains information for user consumption.
##
## $BLEInfo                                            # Data supplied by this server
##     ->{Timeout}                                     # Timeout in seconds for commands (DEFAULT: 10)
##     ->{Hostname}                                    # System name (from /etc/hostname)
##     ->{IFaces}                                      # Available BLE interfaces
##         ->{$IF}                                     # Interface to scan     (ex: "hci0")
##             ->{IFace  }                             # Name of interface   (same as hash key)
##             ->{Address}                             # Address of interface
##             ->{Running}                             # TRUE if up and running
##             ->{Devs}                                # Scanned devices
##                 ->{$Dev}                            # BLE device ID                 (ex: "84:2E:14:87:66:97")
##                     ->{ID}                          # Device ID                     (same as hash key)
##                     ->{Name}                        # Name of device                (ex: "Jovan Heart Monitor")
##                     ->{Names}[]                     # Array of names returned in scan
##                     ->{Services}                    # Services available
##                         ->{$UUID}                   # UUID of service               (ex: "00001801-0000-1000-8000-00805f9b34fb")
##                             ->{UUID}                # Service UUID                  (same as hash key)
##                             ->{Service}             # First 8 hex digits of UUID    (ex: "00001801")
##                             ->{GATTInfo}            # GATT info of service
##                             ->{HStart}              # Start of characteristics
##                             ->{HEnd}                # End   of characteristics
##                             ->{Chars}               # List of available characteristics
##                                 ->{$Char}           # Handle for this char          (ex: "0002")
##                                     ->{Handle}      # Handle                        (same as hash key)
##                                     ->{VHandle}     # Handle for value
##                                     ->{Properties}  # R/W, etc
##                                     ->{UUID}        # Full UUID of characteristic   (ex: "00001801-0000-1000-8000-00805f9b34fb")
##                                     ->{Service}     # First 8 digits of char UUID   (ex: "00001801")
##                                     ->{GATTInfo}    # GATT info of service
##
##  {GATTINFO}->
##      {Type}              # Type of GATT entry for UUID
##      {ID}                # UUID service (First 8 digits of UUID)
##      {Name}              # Name of GATT entry (ex: "Device Information")
##
## A device scan can return several names for any device, including the string "(unknown)". The library attempts
##   to choose the best human-readable name from the list and returns it as "Name", but includes the array "Names"
##   in case the user wants to use a different one.
##
########################################################################################################################
########################################################################################################################
##
##  MIT LICENSE
##
##  Permission is hereby granted, free of charge, to any person obtaining a copy of
##    this software and associated documentation files (the "Software"), to deal in
##    the Software without restriction, including without limitation the rights to
##    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
##    of the Software, and to permit persons to whom the Software is furnished to do
##    so, subject to the following conditions:
##
##  The above copyright notice and this permission notice shall be included in
##    all copies or substantial portions of the Software.
##
##  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
##    INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
##    PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
##    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
##    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
##    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##
########################################################################################################################
########################################################################################################################

use strict;
use warnings;
use Carp;

our $VERSION = 'BLEServer2020-10-20';

use JSON;
use Data::Dumper;

use lib "$ENV{HOME}/BLEServer/lib";

use Site::Process;
use Site::WSServer;
use Site::BLEInfo;
use Site::ParseData;
use Site::RasPiUtils;

########################################################################################################################
########################################################################################################################
##
## Data declarations
##
########################################################################################################################
########################################################################################################################

our $SERVER_PORT     = 2021;

our $DEFAULT_TIMEOUT = 10;      # Timeout when waiting for any command, in seconds

our $BLEInfo;                   # Info given to web page

our $NoError = "No error.";

########################################################################################################################
########################################################################################################################
##
## BLE server
##
########################################################################################################################
########################################################################################################################

#
# Process command line args.
#
#     -v (verbose) means "print out extra stuff"
#
my $Verbose = 0;

$Verbose = 1
    if defined $ARGV[0] and $ARGV[0] eq "-v";

$BLEInfo = { Timeout   => $DEFAULT_TIMEOUT,
             Hostname  => GetHostname(),
             };

# print Data::Dumper->Dump([$BLEInfo],["BLEInfo"]);
# exit(0);

########################################################################################################################
########################################################################################################################
#
# Setup a web socket and listen for connections.
#
Message("**** BLEServer: BLEServer is up and running.")
    if $Verbose;

Message("**** BLEServer: Waiting for websocket connection")
    if $Verbose;

Site::WSServer::InitWSServer($SERVER_PORT,[],\&WebRequest,\&ConnectionRequest)->start;

exit(1);

########################################################################################################################
########################################################################################################################
#
# ConnectionRequest - Process incoming connection requests
#
# Inputs:      Connection
#              Server
#
# Outputs:     TRUE  if should accept this request
#              FALSE if should reject this request
#
sub ConnectionRequest {

#     kill "USR1",getppid         # Inform server of activity
#         unless $DB::single;     #   (but not if debugging)

    return 1;
    }


########################################################################################################################
########################################################################################################################
# 
#  WebRequest - Process incoming web page requests
# 
#  Inputs:      JSON encoded struct of request
#               Connection
#               Server
# 
#  Outputs:     None
# 
sub WebRequest {
    my $JSONText = shift // "";
    my $Conn     = shift;
    my $Server   = shift;
    
#    kill "USR1",getppid         # Inform server of activity
#        unless $DB::single;     #   (but not if debugging)

    #
    # Lots of error checking for web requests.
    #
    return Message("**** BLEServer: No Web request")
        unless length $JSONText;

    my $Request = eval{decode_json $JSONText};              # Catches/avoids Croak() in lib function

    return Message("**** BLEServer: Bad JSON Web request: ($JSONText)")
        unless defined $Request && (ref $Request) eq "HASH";

# print Data::Dumper->Dump([$Request],["Request"]);

    $Request->{Type} //= "";
        
    return Message("**** BLEServer: No request type: ($JSONText)")
        unless length $Request->{Type};

    $Request->{Error} = $NoError;   # Default for commands

    #
    # GetBLEInfo - Return the BLE server information
    #
    if( $Request->{Type} eq "GetBLEInfo" ) {
        Message("**** BLEServer: GetBLEInfo()")
            if $Verbose;
        $Request->{State} = $BLEInfo;
        }

    #
    # ScanIFs - Scan for interfaces that can handle BLE
    #
    elsif( $Request->{Type} eq "ScanIFs" ) {

        Message("**** BLEServer: ScanIFs()")
            if $Verbose;

        $Request->{State} = GetBLEIFaces($BLEInfo->{Timeout});
        }

    #
    # ScanDevs - Scan for devices seen by interface
    #
    elsif( $Request->{Type} eq "ScanDevs" ) {
        my $IFace = $Request->{Arg1};

        Message("**** BLEServer: ScanDevs($IFace)")
            if $Verbose;

        $Request->{State} = GetBLEDevs($IFace,$BLEInfo->{Timeout});
        }

    #
    # ScanServices - Scan for device services
    #
    elsif( $Request->{Type} eq "ScanServices" ) {
        my $IFace = $Request->{Arg1};
        my $Dev   = $Request->{Arg2};

        Message("**** BLEServer: ScanServices($IFace,$Dev)")
            if $Verbose;

        $Request->{State} = GetBLEServices($IFace,$Dev,$BLEInfo->{Timeout});
        }

    #
    # ScanChars - Scan for service characteristics
    #
    elsif( $Request->{Type} eq "ScanChars" ) {
        my $IFace  = $Request->{Arg1};
        my $Dev    = $Request->{Arg2};
        my $HStart = $Request->{Arg3};
        my $HEnd   = $Request->{Arg4};

        Message("**** BLEServer: ScanChars($IFace,$Dev,$HStart,$HEnd)")
            if $Verbose;

        $Request->{State} = GetBLEChars($IFace,$Dev,"0x$HStart","0x$HEnd",$BLEInfo->{Timeout});
        }

    #
    # GetCharValue - Return value for specified characteristic
    #
    elsif( $Request->{Type} eq "GetBLECharValue" ) {
        my $IFace = $Request->{Arg1};
        my $Dev   = $Request->{Arg2};
        my $VHnd  = $Request->{Arg3};

        Message("**** BLEServer: GetCharValue($IFace,$Dev,$VHnd)")
            if $Verbose;

        $Request->{State} = GetBLECharValue($IFace,$Dev,$VHnd,$BLEInfo->{Timeout});
        }

    #
    # GetGATTInfo - Return GATT info for specified UUID
    #
    elsif( $Request->{Type} eq "GetGATTInfo" ) {
        my $UUID = $Request->{Arg1};

        Message("**** BLEServer: GetGATTInfo($UUID)")
            if $Verbose;

        $Request->{State} = GetGATTDesc($UUID);
        }

    #
    # Unknown request type: Return error to caller
    #
    else {
        Message("**** BLEServer: ConfigServer: Unknown request type ($Request->{Type})")
            if $Verbose;
        $Request->{Error} = "**** BLEServer: ConfigServer: Unknown request type ($Request->{Type})";
        }

    #
    # Pack up the error message and return the struct to the caller
    #
    SendResponse($Conn,$Request);
    }
