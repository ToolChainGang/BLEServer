#!/usr/bin/perl
#
########################################################################################################################
########################################################################################################################
##
##      Copyright (C) 2020 Peter Walsh, Milford, NH 03055
##      All Rights Reserved under the MIT license as outlined below.
##
##  FILE
##
##      GPIOServer
##
##  DESCRIPTION
##
##      RasPi configuration server
##
##      Accept commands from a web socket and perform that function.
##
##  USAGE
##
##      GPIOServer [-v]
##
##      where:      -v      Verbose: print out things as they happen
##
##      Available commands:
##
##      ListCommands        => Array of available commands (this list)
##      GetGPIOInfo         => Return GPIOInfo struct of info
##      SetGPIOInfo         => Accept new GPIOInfo struct and change names
##      ToggleGPIO  GPIO#   => Change the state of one GPIO to opposite state
##      SetGPIO     GPIO#   => Set    the state of one GPIO to specific value
##      CycleGPIO   GPIO#   => Turn one GPIO off, wait, then turn ON again
##      ReadGPIO            => Read all GPIO values (synonym for GetGPIOInfo)
##
##      SetUName    GPIO# Name        => Set UName of GPIO
##      SetUDesc    GPIO# Desc        => Set UDesc of GPIO
##
##      Examples:
##
##          ToggleGPIO 7            Change state of GPIO 7: if Off, becomes On. If On, becomes Off
##
##          CycleGPIO  10           Will turn 10 Off, wait a while, then on again
##
##          SetUName   7 "Keurig"   Change UName of GPIO7 to "Keurig"
##
########################################################################################################################
########################################################################################################################
##
##      $GPIOInfo   contains information for user consumption: UName, UDesc, Value, and so on.
##
##      $GPIOInfo->{GPIOInfo}->[]
##          {UName} -> "Keurig",                         # User assigned name
##          {UDesc} -> "Coffee maker in the kitchen"     # User assigned comment
##          {HName} -> "Relay 1"                         # Hardware name
##          {Mode}  -> [ 'Input', 'Output' ],
##          {Value} -> [    'On',    'Off' ],            # Current value
##          {ID}                                         # (unused by web page)
##
##      $GPIOConfig contains full information about the GPIO, including the opened device, mode, 
##                    logic, and so on.
##
##      $GPIOConfig->{GPIO}             # GPIO number, ie "5"
##          {UName}  -> "Keurig",                         # User assigned name
##          {UDesc}  -> "Coffee maker in the kitchen"     # User assigned comment
##          {HName}  -> "Relay 1"                         # Hardware name
##          { Mode}  -> [  "Input", "Output" ],
##          {Logic}  -> [ "Normal", "Invert" ],
##          { Boot}  -> [    "Off",     "On" ],
##          { Pull}  -> [  "None", "Low", "High" ],
##          {Device} -> (opened GPIO device)
##
##      "Value" and "ID" only exist in the Info struct.
##
##      The logic will convert keywords to camel case; thus, it is sufficient to
##        say things like "if $GPIO->{Logic} eq "Invert" and expect an exact match.
##
########################################################################################################################
########################################################################################################################
##
##  MIT LICENSE
##
##  Permission is hereby granted, free of charge, to any person obtaining a copy of
##    this software and associated documentation files (the "Software"), to deal in
##    the Software without restriction, including without limitation the rights to
##    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
##    of the Software, and to permit persons to whom the Software is furnished to do
##    so, subject to the following conditions:
##
##  The above copyright notice and this permission notice shall be included in
##    all copies or substantial portions of the Software.
##
##  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
##    INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
##    PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
##    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
##    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
##    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##
########################################################################################################################
########################################################################################################################

use strict;
use warnings;
use Carp;

our $VERSION = 'GPIOServer2020-10-20';

use RPi::Pin;
use RPi::Const qw(:all);

use JSON;
use Data::Dumper;
use File::Slurp qw(read_file);

use lib "$ENV{HOME}/GPIOServer/lib";

use Site::Process;
use Site::WSServer;
use Site::ParseData;
use Site::RasPiUtils;

########################################################################################################################
########################################################################################################################
##
## Data declarations
##
########################################################################################################################
########################################################################################################################

our $SERVER_PORT = 2021;

our $CycleDefaultMS = 6000;     # 6 seconds wait when power cycling

our $SysName;
our $GPIOConfig;        # Full description of GPIO block
our $GPIOInfo;          # Info given to web page

our $NoError = "No error.";

#  #
#  # Comment
#  #
#  AllowRename yes             # Allow user to change UName and UDesc
#
#  GPIO    7
#      Mode=Input              # One of:   Input   Output
#      Logic=Invert            #           Invert  Normal
#      Pull=High               #           High    Low
#      Boot=Low                # Value to take at bootup
#      HName="Relay 1"         # Hardware name
#      UName="Keurig"          # User's   assigned name
#      UDesc="Coffee maker in the kitchen"
#
our $RenameKey = "AllowRename";

our $GPIOConfigFile = "$ENV{HOME}/GPIOServer/etc/GPIO.conf";
our $GPIOMatches = [
    {                     RegEx  => qr/^\s*#/                   ,Action => Site::ParseData::SkipLine    }, # Skip Comments
    { Name => $RenameKey, RegEx  => qr/^\s*AllowRename\s*(\w+)/ ,Action => Site::ParseData::AddGlobal   },
    {                     RegEx  => qr/^\s*GPIO\s*(\d+)/i       ,Action => Site::ParseData::StartSection},
    { Name => "Mode"    , RegEx => qr/^\s*Mode\s*=\s*(\w+)/i    ,Action => Site::ParseData::AddVar      },
    { Name => "Logic"   , RegEx => qr/^\s*Logic\s*=\s*(\w+)/i   ,Action => Site::ParseData::AddVar      },
    { Name => "Pull"    , RegEx => qr/^\s*Pull\s*=\s*(\w+)/i    ,Action => Site::ParseData::AddVar      },
    { Name => "Boot"    , RegEx => qr/^\s*Boot\s*=\s*(\w+)/i    ,Action => Site::ParseData::AddVar      },
    { Name => "HName"   , RegEx => qr/^\s*HName\s*=\s*(".*")/i  ,Action => Site::ParseData::AddQVar     },
    { Name => "UName"   , RegEx => qr/^\s*UName\s*=\s*(".*")/i  ,Action => Site::ParseData::AddQVar     },
    { Name => "UDesc"   , RegEx => qr/^\s*UDesc\s*=\s*(".*")/i  ,Action => Site::ParseData::AddQVar     },
    ];

########################################################################################################################
########################################################################################################################
##
## GPIO server
##
########################################################################################################################
########################################################################################################################

#
# Process command line args.
#
#     -v (verbose) means "print out extra stuff"
#
my $Verbose = 0;

$Verbose = 1
    if defined $ARGV[0] and $ARGV[0] eq "-v";

GetGPIOConfig();
$SysName    = GetHostname();
$GPIOInfo   = GetGPIOInfo();

# print Data::Dumper->Dump([$GPIOInfo],["GPIOInfo"]);
# exit(0);

########################################################################################################################
########################################################################################################################
#
# Setup a web socket and listen for connections.
#
Message("**** GPIOServer: GPIOServer is up and running.")
    if $Verbose;

Message("**** GPIOServer: Waiting for websocket connection")
    if $Verbose;

Site::WSServer::InitWSServer($SERVER_PORT,[],\&WebRequest,\&ConnectionRequest)->start;

exit(1);

########################################################################################################################
########################################################################################################################
#
# ConnectionRequest - Process incoming connection requests
#
# Inputs:      Connection
#              Server
#
# Outputs:     TRUE  if should accept this request
#              FALSE if should reject this request
#
sub ConnectionRequest {

#     kill "USR1",getppid         # Inform server of activity
#         unless $DB::single;     #   (but not if debugging)

    return 1;
    }


########################################################################################################################
########################################################################################################################
#
# UpdateClients - Updat all existing clients with new information
#
# Inputs:      Error message to send
#
# Outputs:     None. Connected clients are sent a new GPIOInfo struct
#
sub UpdateClients {

    my $Server  = GetServer();
    my $Request = { Type => "GetGPIOInfo", State => $GPIOInfo, Error => $NoError };

    SendResponse($_,$Request)
        for $Server->connections();
    }


########################################################################################################################
########################################################################################################################
#
# PinChange - Handle pin change notifications
#
# Inputs:      None.
#
# Outputs:     None. Connected clients are sent a new GPIOInfo struct
#
sub PinChange {

    Message("**** GPIOServer: PinChange!");

    GetGPIOValues();        # Will update all clients
    UpdateClients();
    }


########################################################################################################################
########################################################################################################################
# 
#  WebRequest - Process incoming web page requests
# 
#  Inputs:      JSON encoded struct of request
#               Connection
#               Server
# 
#  Outputs:     None
# 
sub WebRequest {
    my $JSONText = shift // "";
    my $Conn     = shift;
    my $Server   = shift;
    
#    kill "USR1",getppid         # Inform server of activity
#        unless $DB::single;     #   (but not if debugging)

    #
    # Lots of error checking for web requests.
    #
    return Message("**** GPIOServer: No Web request")
        unless length $JSONText;

    my $Request = eval{decode_json $JSONText};              # Catches/avoids Croak() in lib function

    return Message("**** GPIOServer: Bad JSON Web request: ($JSONText)")
        unless defined $Request && (ref $Request) eq "HASH";

# print Data::Dumper->Dump([$Request],["Request"]);

    $Request->{Type} //= "";
        
    return Message("**** GPIOServer: No request type: ($JSONText)")
        unless length $Request->{Type};

    #
    # ListCommands - Return list of available server commands
    #
    if( $Request->{Type} eq "ListCommands" ) {
        $Request->{Error} = $NoError;
        Message("**** GPIOServer: ListCommands()")
            if $Verbose;
        $Request->{State} = [ "ListCommands", 
                              "GetGPIOInfo",  
                              "SetGPIOInfo",
                              "ToggleGPIO",
                              "SetGPIO",
                              "CycleGPIO",
                              "ReadGPIO" ];
        SendResponse($Conn,$Request);
        return;
        }

    #
    # GetGPIOInfo - Return the GPIO information
    #
    if( $Request->{Type} eq "GetGPIOInfo" or
        $Request->{Type} eq "ReadGPIO"  ) {
        $Request->{Error} = $NoError;
        Message("**** GPIOServer: GetGPIOInfo()")
            if $Verbose;
        #
        # Getting values and returning $GPIOInfo is the default (see below)
        #
        }

    #
    # SetGPIOInfo - Implement new GPIO user name and comment
    #
    elsif( $Request->{Type} eq "SetGPIOInfo" ) {
        $Request->{Error} = $NoError;
        Message("**** GPIOServer: SetGPIOInfo()")
            if $Verbose;
        $Request->{Error} = SetGPIOInfo($Request->{Arg1},$GPIOInfo,$Verbose);
        $GPIOInfo = GetGPIOInfo();
        }

    #
    # ToggleGPIO - Change value of GPIO output
    #
    elsif( $Request->{Type} eq "ToggleGPIO" ) {
        Message("**** GPIOServer: ToggleGPIO($Request->{Arg1})")
            if $Verbose;
        $Request->{Error} = ToggleGPIO($Request->{Arg1});
        }

    #
    # SetGPIO - Set value of GPIO output to specified arg
    #
    elsif( $Request->{Type} eq "SetGPIO" ) {
        Message("**** GPIOServer: SetGPIO($Request->{Arg1},$Request->{Arg2})")
            if $Verbose;
        $Request->{Error} = SetGPIO($Request->{Arg1},$Request->{Arg2});
        }

    #
    # CycleGPIO - Power cycle (Off, then On) a GPIO
    #
    elsif( $Request->{Type} eq "CycleGPIO" ) {
        Message("**** GPIOServer: CycleGPIO($Request->{Arg1},$Request->{Arg2})")
            if $Verbose;
        $Request->{Error} = $NoError;
        my $CycleMS = $Request->{Arg2} // $CycleDefaultMS;
        $Request->{Error} = SetGPIO($Request->{Arg1},"Off");
        if( $Request->{Error} eq $NoError ) {
            sleep $CycleMS/1000.0;
            $Request->{Error} = SetGPIO($Request->{Arg1},"On");
            }
        }

    #
    # SetUName - Set UName of GPIO to specified arg
    #
    elsif( $Request->{Type} eq "SetUName" ) {
        Message("**** GPIOServer: SetUName($Request->{Arg1},$Request->{Arg2})")
            if $Verbose;

        $Request->{Error} = SetUName($Request->{Arg1},$Request->{Arg2},$Verbose);
        }

    #
    # SetUDesc - Set UDesc of GPIO to specified arg
    #
    elsif( $Request->{Type} eq "SetUDesc" ) {
        Message("**** GPIOServer: SetUDesc($Request->{Arg1},$Request->{Arg2})")
            if $Verbose;

        $Request->{Error} = SetUDesc($Request->{Arg1},$Request->{Arg2},$Verbose);
        }

    #
    # Unknown request type: Return error to caller
    #
    else {
        Message("**** GPIOServer: ConfigServer: Unknown request type ($Request->{Type})")
            if $Verbose;
        $Request->{Error} = "**** GPIOServer: ConfigServer: Unknown request type ($Request->{Type})";
        }

    #
    # Pack up the error message and return the struct to the caller
    #
    GetGPIOValues();
    $Request->{State} = $GPIOInfo;
    SendResponse($Conn,$Request);
    }


########################################################################################################################
########################################################################################################################
#
# GetGPIOConfig - Set up a local config struct with all the GPIO information.
#
# Inputs:      None.
#
# Outputs:     None. Global $GPIOConfig is filled
#
sub GetGPIOConfig {

    ####################################################################################################################
    #
    # GPIO information, from config file
    #
    return { Valid => 0 }
        unless -r $GPIOConfigFile;

    my $ConfigFile = Site::ParseData->new(Filename => $GPIOConfigFile, Matches  => $GPIOMatches);
    $GPIOConfig = $ConfigFile->ParseFile();

    $GPIOConfig->{$RenameKey} = MatchArgs($GPIOConfig->{$RenameKey}, [ "Yes", "No" ],"Global",$RenameKey);
    $GPIOConfig->{Valid} = $ConfigFile->{Parsed};

    foreach my $GPIOID (keys %{$GPIOConfig}) {

        next
            if $GPIOID eq "Valid" or $GPIOID eq $RenameKey;

        ################################################################################################################
        #
        # Do some conversions and simple error checking on the GPIO input file
        #
        # GPIO    3
        #     Mode=Output
        #     Logic=Normal
        #     Pull=High
        #     Boot=Off
        #     HName="Relay U3"
        #     UName="Relay U3"
        #     UDesc=""
        #
        exit Message("**** GPIOServer: GPIO ID ($GPIOID) is not valid number")
            unless $GPIOID =~ /^\d+$/;

        exit Message("**** GPIOServer: GPIO ID ($GPIOID) is out of range")
            unless $GPIOID >= 0 and $GPIOID <= 31;

        my $GPIO = $GPIOConfig->{$GPIOID};

        $GPIO->{ Mode} = MatchArgs($GPIO->{ Mode},[  "Input", "Output" ],$GPIOID, "Mode");
        $GPIO->{Logic} = MatchArgs($GPIO->{Logic},[ "Normal", "Invert" ],$GPIOID,"Logic");
        $GPIO->{ Boot} = MatchArgs($GPIO->{ Boot},[    "Off",     "On" ],$GPIOID, "Boot");

        #
        # Pull takes "High", "Low", or "None". Devault (1st arg) is "None".
        #
        $GPIO->{Pull} = MatchArgs($GPIO->{Pull},[  "None", "Low", "High" ],$GPIOID, "Pull")
            if $GPIO->{Mode} eq "Input";

        $GPIO->{HName} = "GPIO$GPIOID"
            unless defined $GPIO->{HName} and length $GPIO->{HName};

        $GPIO->{UName} = "GPIO$GPIOID"
            unless defined $GPIO->{UName} and length $GPIO->{UName};

        $GPIO->{UDesc} = "---"
            unless defined $GPIO->{UDesc} and length $GPIO->{UDesc};

        ################################################################################################################
        #
        # Connect to the GPIO in question and get the current value
        #
        my $Device = RPi::Pin->new($GPIOID);
        $GPIO->{Device} = $Device;

        if( $GPIO->{Mode} eq "Input" ) { 
            $Device->mode(INPUT); 

            if(    $GPIO->{Pull} eq "High" ) { $Device->pull(PUD_UP)  ; }
            elsif( $GPIO->{Pull} eq "Low"  ) { $Device->pull(PUD_DOWN); }
            else                             { $Device->pull(PUD_OFF) ; }

            $Device->set_interrupt(EDGE_BOTH,'main::PinChange');
            }
        else                           { 
            #
            # Avoid pathological spike that can happen if we set the mode
            #   before setting the output value.
            #
            SetGPIO($GPIOID,$GPIO->{Boot});
            $Device->mode(OUTPUT); 
            SetGPIO($GPIOID,$GPIO->{Boot});
            }
        }
    }


########################################################################################################################
########################################################################################################################
#
# GetGPIOInfo - Get an abbreviated struct for the Web interface
#
# Inputs:      None.
#
# Outputs:     GPIOInfo struct
#
sub GetGPIOInfo {

    my $GPIOInfo = { $RenameKey => $GPIOConfig->{$RenameKey} // "Yes", GPIOInfo => [] };

    foreach my $GPIOID (keys %{$GPIOConfig}) {

        next
            if $GPIOID eq "Valid" or $GPIOID eq $RenameKey;

        my $GPIO = $GPIOConfig->{$GPIOID};

        push @{$GPIOInfo->{GPIOInfo}},{ UName  => $GPIO->{ UName}, 
                                        UDesc  => $GPIO->{ UDesc}, 
                                        HName  => $GPIO->{ HName}, 
                                        Mode   => $GPIO->{  Mode},
                                        ID     => $GPIOID };
        }

    $GPIOInfo->{SysName} = $SysName;

    $GPIOInfo->{GPIOInfo} = [ sort { $a->{ID} <=> $b->{ID} } @{$GPIOInfo->{GPIOInfo}} ];

    return $GPIOInfo;
    }


########################################################################################################################
########################################################################################################################
#
# GetGPIOValues - Read current values for all GPIOs
#
# Inputs:      None.
#
# Outputs:     None. Values are set in place at $GPIOInfo->{GPIOInfo}
#
sub GetGPIOValues {

    #
    # Run through the existing GPIO list, getting current values
    #
    foreach my $GPIO (@{$GPIOInfo->{GPIOInfo}}) {
        my $Value = $GPIOConfig->{$GPIO->{ID}}->{Device}->read();

        $Value = 1 - $Value
            if $GPIOConfig->{$GPIO->{ID}}->{Logic} eq "Invert";

        $GPIO->{Value} = $Value ? "On" : "Off";
        }
    }


########################################################################################################################
########################################################################################################################
#
# ToggleGPIO - Toggle value of GPIO
#
# Inputs:      ID of GPIO to toggle
#
# Outputs:     Error msg, or $NoError
#
sub ToggleGPIO {
    my $GPIOID = shift;

    my $GPIO = $GPIOConfig->{$GPIOID};

    if( $GPIO->{Mode} ne "Output" ) {
        Message("**** GPIOServer: Not an output device ($GPIOID)")
            if $Verbose;
        return "Not an output device ($GPIOID)";
        }

    my $Value = $GPIO->{Device}->read();
    $GPIO->{Device}->write(1 - $Value);

    return $NoError;
    }


########################################################################################################################
########################################################################################################################
#
# SetGPIO - Set value of GPIO
#
# Inputs:       ID of GPIO to toggle
#               New Value to set
#
# Outputs:      Error msg, or $NoError
#
# IMPORTANT: "On" and "Off" mean different things depending on the "Logic" setting, "High", "Low", and other
#              explicit settings do not. If you set the output "High" the output is high, if you set the output
#              "On", the output might be high or low, depending on the logic.
#
sub SetGPIO {
    my $GPIOID  = shift;
    my $Setting = shift;

    my $GPIO = $GPIOConfig->{$GPIOID};

    unless( defined($GPIO) ) {
        Message("**** GPIOServer: Server does not control GPIO ($GPIOID)")
            if $Verbose;
        return "Server does not control GPIO ($GPIOID)";
        }

    if( $GPIO->{Mode} ne "Output" ) {
        Message("**** GPIOServer: Not an output device ($GPIOID)")
            if $Verbose;
        return "Not an output device ($GPIOID)";
        }

    my $Value = -1;

    $Value = 1
        if lc($Setting) eq "high" or lc($Setting) eq "1";

    $Value = 0
        if lc($Setting) eq "low"  or lc($Setting) eq "0";

    if( lc($Setting) eq "on" ) {
        $Value = $GPIO->{Logic} eq "Normal" ? 1 : 0;
        }

    if( lc($Setting) eq "off" ) {
        $Value = $GPIO->{Logic} eq "Invert" ? 1 : 0;
        }

    if( $Value == -1 ) {
        Message("**** GPIOServer: Unrecognized set value ($GPIOID,$Setting)")
            if $Verbose;
        return "Unrecognized set value ($GPIOID,$Setting)";
        }

    $GPIO->{Device}->write($Value);

    return $NoError;
    }
    

########################################################################################################################
########################################################################################################################
#
# SetUName - Set UName of GPIO
#
# Inputs:      ID of GPIO to toggle
#              New UName to use
#              TRUE if verbose mode
#
# Outputs:     Error msg, or $NoError
#
sub SetUName {
    my $GPIOID  = shift;
    my $UName   = shift;
    my $Verbose = shift;

    if( $GPIOInfo->{$RenameKey} ne "Yes" ) {
        Message("**** GPIOServer: Renaming disallowed.")
            if $Verbose;
        return "Renaming disallowed";
        }

    my $GPIO = (grep { $_->{ID} eq $GPIOID } @{$GPIOInfo->{GPIOInfo}})[0];

    unless( defined($GPIO) ) {
        Message("**** GPIOServer: Server does not control GPIO ($GPIOID)")
            if $Verbose;
        return "Server does not control GPIO ($GPIOID)";
        }

    $GPIO->{UName} = $UName;

    return SetGPIOInfo($GPIOInfo,$Verbose);
    }
    

########################################################################################################################
########################################################################################################################
#
# SetUDesc - Set UDesc of GPIO
#
# Inputs:      ID of GPIO to toggle
#              New UDesc to use
#              TRUE if verbose mode
#
# Outputs:     Error msg, or $NoError
#
sub SetUDesc {
    my $GPIOID  = shift;
    my $UDesc   = shift;
    my $Verbose = shift;

    if( $GPIOInfo->{$RenameKey} ne "Yes" ) {
        Message("**** GPIOServer: Renaming disallowed.")
            if $Verbose;
        return "Renaming disallowed";
        }

    my $GPIO = (grep { $_->{ID} eq $GPIOID } @{$GPIOInfo->{GPIOInfo}})[0];

    unless( defined($GPIO) ) {
        Message("**** GPIOServer: Server does not control GPIO ($GPIOID)")
            if $Verbose;
        return "Server does not control GPIO ($GPIOID)";
        }

    $GPIO->{UDesc} = $UDesc;

    return SetGPIOInfo($GPIOInfo,$Verbose);
    }
    

########################################################################################################################
########################################################################################################################
#
# SetGPIOInfo - Set a new GPIO config
#
# Inputs:      Requested config state
#              Original  config state (for comparison)
#              TRUE if verbose mode
#
# Outputs:     Error message
#
sub SetGPIOInfo {
    my $NewInfo = shift;
    my $Verbose = shift;

    my $GPIOInfo = {};

    foreach my $GPIO (@{$NewInfo->{GPIOInfo}}) {
        $GPIOInfo->{$GPIO->{ID}}->{UName} = $GPIO->{UName};
        $GPIOInfo->{$GPIO->{ID}}->{UDesc} = $GPIO->{UDesc};
        $GPIOConfig->{$GPIO->{ID}}->{UName} = $GPIO->{UName};
        $GPIOConfig->{$GPIO->{ID}}->{UDesc} = $GPIO->{UDesc};
        }

# print Data::Dumper->Dump([$GPIOInfo],["GPIOInfo"])

    #
    # If the original file did not exist, create an empty one.
    #
    unless( -w $GPIOConfigFile ) {
        write_file($GPIOConfigFile,"");
        }

    unless( -w $GPIOConfigFile ) {
        Message("**** GPIOServer: Cannot write $GPIOConfigFile")
            if $Verbose;
        return "Cannot write $GPIOConfigFile";
        }

    my $ConfigFile = Site::ParseData->new(Filename => $GPIOConfigFile, Matches  => $GPIOMatches);
    my $GPIOConfig = $ConfigFile->ParseFile();

    $ConfigFile->FromHash($GPIOInfo);
    $ConfigFile->Update();
    $ConfigFile->SaveFile();

# use Data::Dumper;
# print Data::Dumper->Dump([$ConfigFile->{Lines}],[$ConfigFile->{Filename}]);

    return $NoError;
    }


########################################################################################################################
########################################################################################################################
#
# MatchArgs - Match a GPIO description with one (of two) arguments
#
# Inputs:      Argument to match                (ex: "Mode")
#              Array of possible args to match  (ex: [ "High", "Low" ] )
#              GPIO ID this arg applies to         (for error message)
#              Argument name this match applies to (for error message)
#
# Outputs:     The canonical argument that matches (ie: "Input" or "Output", matched case insensitive)
#
# NOTES: If the $Arg is blank or undefined, the 1st match is given as default.
#
sub MatchArgs {
    my $Arg     = shift;
    my $Matches = shift;
    my $GPIOID  = shift;
    my $ArgName = shift;

    #
    # If $Arg unspecified, take 1st match as default.
    #
    return $Matches->[0]
        unless defined $Arg and length $Arg;

    foreach my $Match (@{$Matches}) {
        return $Match
            if $Arg =~ /$Match/i;
        }

    exit Message("**** GPIOServer: GPIO ID ($GPIOID) $Arg is not a valid setting for $ArgName.");
    }
